




float w_penumbra(float d_receiver, float d_blocker, float w_light) {
    return (d_receiver - d_blocker) * w_light/ d_blocker;
}


float avg_block_depth(vec4 FragLightSpace, float w_light, sampler2D shadowMap, float currentDepth, vec3 projCoords){
    float blockerSum = 0;
    int blockerCount = 0;
    
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0) * 2.f;

    float search_range = w_light * (currentDepth - 0.) /currentDepth;
    if(search_range <= 0){
        return 0;
    }
    //return search_range / 7.0;
    int range = int(search_range);
    //return range / 10.0;
    
    int window = 1;
    for( int i = -window; i < window; i += 2 ){
        for( int j = -window; j < window; j +=2 ){
            vec2 shift = vec2(i * 1.0 * range / window, j * 1.0 * range / window);
            
            //sampleDepth = shadow map value at location (i , j) in the search region
            float sampleDepth = 1 - chebyshev(texture(shadowMap, projCoords.xy + shift * texelSize).xy, currentDepth);
            //texture(shadowMap, projCoords.xy + shift * texelSize).r;
            
            if ( sampleDepth < currentDepth ){
                blockerSum += sampleDepth;
                blockerCount++;
            }
        }
    }
    
    if(blockerCount > 0){
        return blockerSum / blockerCount;
    } else {
        return 0; //--> not in shadow~~~~
    }
}


float PenumbraShadowCalculation(vec4 FragLightSpace, sampler2D shadowMap, vec3 Normal, vec3 FragPos, vec3 lightDir)
{
    float vertexNormalToLight = dot(Normal, lightDir);
    if (vertexNormalToLight <= 0.f){
        return 1.f; // ignore parallel normals
    }
    vec3 projCoords = FragLightSpace.xyz / FragLightSpace.w;
    float bias = max(u_ShadowBias * (1.0 - vertexNormalToLight), 0.001);
	//projCoords.z -= bias; // z bias
	projCoords = projCoords * 0.5 + vec3(0.5);

	if (projCoords.z < 0.0) {
		return 0.0;
	}
	float shadow = 0.0;
    
	vec4 moments = texture(u_DepthMapTexture, projCoords.xy); // pos, pos^2, neg, neg^2

	vec3 tempprojCoords = projCoords* 2.0 - 1.0;

	float pos = exp(u_Exponents.x * tempprojCoords.z);
	float neg = -exp(-u_Exponents.y * tempprojCoords.z);
    
		
	if (u_EVSMMode == 0) {
		shadow =  chebyshev(moments.xy, pos);
	} else {
		float posShadow = chebyshev(moments.xy, pos);
		float negShadow = chebyshev(moments.zw, neg);
        pos  = max(pos,neg);
		shadow = min(posShadow, negShadow);
	}
    //return shadow;
    float w_light = 15.0;
    float avg_depth = avg_block_depth(FragLightSpace, w_light, shadowMap, pos, projCoords);
    
    if(avg_depth == 0){
        return 0.0f;
    }
    
    float w_penumbra = w_penumbra(pos, avg_depth, w_light);
    //return w_penumbra;
    //if penumbra is zero, it has solid shadow - dark
    if(w_penumbra == 0){
        return 0;
    }
    //return 1 - w_penumbra;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0) * 1.5f;
    int count = 0;
    
    //pick a searching range based on calculated penumbra width.
    int range = int(w_penumbra/0.09);
    
    //manually set a range if it is too large!
    range = range > 3 ? 3 : range;
    range = range < 1 ? 1 : range;

    for(int x = -range; x <= range; ++x)
    {
        count++;
        float pcfDepth = 1 - chebyshev(texture(shadowMap, projCoords.xy + vec2(x, 0.f) * texelSize).xy, pos);
        //texture(shadowMap, projCoords.xy + vec2(x, 0.f) * texelSize).r;
        shadow += pos - bias > pcfDepth  ? 1.0 : 0.0;
       
    }

    count = count > 0 ? count : 1;
    shadow /= (count * count);        
        
    return shadow;
}